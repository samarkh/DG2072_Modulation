using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;

namespace DG2072_USB_Control
{
    /// <summary>
    /// Partial class containing sweep-related UI event handlers
    /// This file is placed in the Sweep folder
    /// </summary>
    public partial class MainWindow
    {
        // Remove all the field declarations since they're auto-generated by XAML
        // Just keep the event handlers

        #region Sweep Event Handlers

        private void SweepToggleButton_Click(object sender, RoutedEventArgs e)
        {
            if (_sweepController == null) return;

            if (_sweepController.IsEnabled)
            {
                _sweepController.DisableSweep();
            }
            else
            {
                _sweepController.EnableSweep();
            }
        }

        // Sweep configuration events
        private void SweepTypeComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnSweepTypeChanged();
        }

        private void SweepTimeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnSweepTimeChanged();
        }

        private void SweepTimeTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(SweepPanelControl.SweepTimeTextBox.Text, out double time))
            {
                SweepPanelControl.SweepTimeTextBox.Text = time.ToString("F3");
            }
        }

        private void ReturnTimeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnReturnTimeChanged();
        }

        private void ReturnTimeTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(SweepPanelControl.ReturnTimeTextBox.Text, out double time))
            {
                SweepPanelControl.ReturnTimeTextBox.Text = time.ToString("F3");
            }
        }

        private void FrequencyModeChanged(object sender, RoutedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            bool useStartStop = SweepPanelControl.StartStopMode.IsChecked == true;
            _sweepController?.OnFrequencyModeChanged(useStartStop);
        }

        // Start/Stop frequency events
        private void StartFrequencyTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStartFrequencyChanged();
        }

        private void StartFrequencyTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            // Format the text
        }

        private void StartFrequencyUnitComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStartFrequencyChanged();
        }

        private void StopFrequencyTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStopFrequencyChanged();
        }

        private void StopFrequencyTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            // Format the text
        }

        private void StopFrequencyUnitComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStopFrequencyChanged();
        }

        // Center/Span frequency events
        private void SweepCenterFrequencyTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnCenterFrequencyChanged();
        }

        private void SweepCenterFrequencyTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            // Format the text
        }

        private void SweepCenterFrequencyUnitComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnCenterFrequencyChanged();
        }

        private void SpanFrequencyTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnSpanFrequencyChanged();
        }

        private void SpanFrequencyTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            // Format the text
        }

        private void SpanFrequencyUnitComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnSpanFrequencyChanged();
        }

        // Marker frequency events
        private void MarkerFrequencyTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnMarkerFrequencyChanged();
        }

        private void MarkerFrequencyTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            // Format the text
        }

        private void MarkerFrequencyUnitComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnMarkerFrequencyChanged();
        }

        // Hold time events
        private void StartHoldTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStartHoldChanged();
        }

        private void StartHoldTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(SweepPanelControl.StartHoldTextBox.Text, out double time))
            {
                SweepPanelControl.StartHoldTextBox.Text = time.ToString("F3");
            }
        }

        private void StopHoldTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStopHoldChanged();
        }

        private void StopHoldTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(SweepPanelControl.StopHoldTextBox.Text, out double time))
            {
                SweepPanelControl.StopHoldTextBox.Text = time.ToString("F3");
            }
        }

        // Step count events
        private void StepCountTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnStepCountChanged();
        }

        private void StepCountTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(SweepPanelControl.StepCountTextBox.Text, out int count))
            {
                SweepPanelControl.StepCountTextBox.Text = count.ToString();
            }
        }

        // Trigger events
        private void TriggerSourceComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnTriggerSourceChanged();
        }

        private void TriggerSlopeComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_isInitializing || !isConnected) return;
            _sweepController?.OnTriggerSlopeChanged();
        }

        private void ManualTriggerButton_Click(object sender, RoutedEventArgs e)
        {
            _sweepController?.ExecuteManualTrigger();
        }

        #endregion
    }
}